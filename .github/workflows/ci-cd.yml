name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  docker-build-and-test:
    name: Docker Build and Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build development image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: development
          load: true
          tags: portfolio-website:development
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Run linting in Docker
        run: docker run --rm portfolio-website:development npm run lint
        
      - name: Run type checking in Docker
        run: docker run --rm portfolio-website:development npx tsc --noEmit
      
      # This would run your tests in Docker once you add the test script
      - name: Run tests in Docker
        run: docker run --rm portfolio-website:development npm test || echo "Tests not yet configured"

  build:
    name: Build for Deployment
    runs-on: ubuntu-latest
    needs: docker-build-and-test
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build production image for GitHub Pages
        run: |
          docker build --target=build \
            --build-arg BUILD_COMMAND="npm run build:github" \
            --build-arg STORYBOOK_BUILD_COMMAND="npm run build-storybook" \
            -t portfolio-website:build .
      
      - name: Extract build artifacts
        run: |
          mkdir -p ./dist
          mkdir -p ./storybook-static
          docker create --name temp portfolio-website:build
          docker cp temp:/app/dist/. ./dist/
          docker cp temp:/app/storybook-static/. ./storybook-static/
          docker rm temp
      
      - name: List contents for debugging
        run: |
          echo "Contents of dist directory:"
          ls -la ./dist
          echo "Contents of dist/assets directory (if exists):"
          ls -la ./dist/assets || echo "Assets directory not found"
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist
            storybook-static

  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          
      - name: Prepare combined deployment
        run: |
          mkdir -p combined-deployment
          cp -r dist/* combined-deployment/
          mkdir -p combined-deployment/storybook
          cp -r storybook-static/* combined-deployment/storybook/
          
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: combined-deployment
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
